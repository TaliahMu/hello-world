%One hour monet with 30 min blanks at beginning and end for spontaneous activity recording
%test with two minutes of blanks and 1 full monet trial, then change to 1800 s for 30 min spontaneous activity


%%%%%%%%%%%%%%%%%%%%%%%%%%Monet without oracle and only 2 minutes long%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%CHANGE "cond.rng_seed = [1:2 randsample(10000, 2)'];" TO CHANGE LENGTH ---- 2=NUMBER OF MINUTES

%moncalib - here moncalib just doesn't run at all but monet does
control = stimulus.getControl;
control.clearTrials()
%run dark screen (0) for 30 min
blanks
%here moncalib runs at the beginning

% get episode specifiction
episode_key = fetch(netflix.CurrentEpisode);

%moncalib - here runs after blanks but still before monet

rng('shuffle')  % random episode seed unlike platinum
seed = randi(50);

%moncalib - here runs after blanks but still before monet

% create blocks for both runs
monet_blocks = make_monet_blocks(control, seed + 1);

%moncalib - here runs before monet or beginning blanks then just freezes
%and need to be manually cancelled

run1 = compile_run([monet_blocks], seed + 6);
run2 = compile_run([monet_blocks], seed + 7);

%moncalib - here runs before monet or beginning blanks then just freezes
%and need to be manually cancelled

%%%%%%%%%%%%%%% Queue Trials %%%%%%%%%%%%%%%%%%%%%%%
disp 'Stimulus is configured'
control.pushTrials(cat(1,run1{:}))
fprintf('Run 1 duration %g seconds\n', control.totalDuration)
control.pushTrials(cat(1,run2{:}))
fprintf('Total duration %g seconds\n', control.totalDuration)

%moncalib - here it just doesn't run

control.clearCachedConditions()  % clears unused conditions from memory

%moncalib here it just doesn't run

function run = compile_run(parametrics, seed)
% compile blocks into a run
rng(seed)
run = [parametrics];
run = run(randperm(end));
end

function blocks = make_monet_blocks(control, seed)
clips_per_block = 4;

cond.fps = control.screen.fps;
assert(~isempty(cond.fps), 'FPS is not available. Please run stimulus.open')
cond.duration = 15;
rng(seed)
cond.rng_seed = [1:2 randsample(10000, 2)'];
cond.pattern_width = 72;
cond.pattern_aspect = 1.7;
cond.ori_coherence = 2.5;
cond.ori_fraction = 1.0;
cond.blue_green_saturation = 0;
cond.temp_kernel = 'hamming';
cond.temp_bandwidth = 4.0;
cond.n_dirs = 16;
cond.ori_mix = 1;
cond.speed = 0.2;

hashes = control.makeConditions(stimulus.Monet2, ...
    stimulus.utils.factorize(cond), 'duration');
blocks = make_blocks(hashes, clips_per_block, seed);
end

function blocks = make_blocks(hashes, block_size, seed)
% pack an array of hashes into array of blocks
rng(seed)
assert(mod(length(hashes), block_size) == 0, ...
    'Block size must be a divisor of number of trials')
blocks = mat2cell(reshape(hashes(randperm(end)), block_size, []), ...
    block_size, ones(1,length(hashes)/block_size));
end

function blanks

color_level = 2^8; % CHANGE BASED ON MAX BIT ON HARDWARE
pixelValues = 0:(color_level-1);
normalizedPixelValues = pixelValues/255;
gammaValue = 1.0; % 2.21

lookuptableValues = normalizedPixelValues.^gammaValue;

lookuptable = repmat(lookuptableValues',1,3);

screen = stimulus.getScreen;

screen.setLUT(lookuptable); % set our new LUT
screen.applyLUT()

control = stimulus.getControl;
control.clearTrials()   % clear trial queue and cached conditions.

cond.duration = 45;
cond.level = 0;
params = stimulus.utils.factorize(cond);

% ramp without photodiode flips
[params.show_flips] = deal(0);
control.pushTrials(control.makeConditions(stimulus.Blank, params))
control.clearCachedConditions()  % clears unused conditions from memory

end

function moncalib

color_level = 2^8; % CHANGE BASED ON MAX BIT ON HARDWARE
pixelValues = 0:(color_level-1);
normalizedPixelValues = pixelValues/255;
gammaValue = 1.0; % 2.21

lookuptableValues = normalizedPixelValues.^gammaValue;

lookuptable = repmat(lookuptableValues',1,3);

screen = stimulus.getScreen;

screen.setLUT(lookuptable); % set our new LUT
screen.applyLUT()

control = stimulus.getControl;
control.clearTrials()   % clear trial queue and cached conditions.

cond.duration = 5;
cond.level = 0:50:200;
params = stimulus.utils.factorize(cond);

% ramp without photodiode flips
[params.show_flips] = deal(0);
control.pushTrials(control.makeConditions(stimulus.Blank, params))
control.clearCachedConditions()  % clears unused conditions from memory

end

%moncalib - here it stops blanks at beginning and monet from running and
%doesn't run
